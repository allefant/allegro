Import("context")
import addons, helpers

configs = []

def CheckFreetype(context):
    context.Message("Checking for Freetype... ")

    ret = context.TryAction("pkg-config freetype2 --cflags --libs")[0]
    if ret:
        tmpEnv = context.env.Clone()
        context.env.ParseConfig("pkg-config freetype2 --cflags --libs")
        ret = context.TryLink("""
            #include <ft2build.h>
            #include FT_FREETYPE_H
                int main(){
                FT_Library ft;
                FT_Init_FreeType(&ft);
                return 0;
            }
            """, ".c");
        context.sconf.env = tmpEnv
    context.Result(ret)
    return ret

config = context.getLibraryEnv().Configure(custom_tests =
    {"CheckFreetype": CheckFreetype,})
settings = helpers.SimpleHash()
settings["ALLEGRO_CFG_TTF_FREETYPE"] = config.CheckFreetype()
config.Finish()

helpers.parse_cmake_h(context.getLibraryEnv(),
    settings,
    "#addons/ttf/allegro5/internal/aintern_ttf_cfg.h.cmake",
    "#addons/ttf/allegro5/internal/aintern_ttf_cfg.h")

source = ["ttf.c"]
configs = []

can_build = True
if can_build:
    configs.extend(["pkg-config freetype2 --libs --cflags"])

    addons.do_build(
        context = context,
        source = source,
        dir = "ttf",
        name = "ttf",
        install_headers = [
            "allegro5/a5_ttf.h",
            "allegro5/internal/aintern_ttf_cfg.h"],
        configs = configs,
        includes = ["#addons/ttf", "#addons/font"],
        example_libs = [context.libraryName("a5_font"),
            context.libraryName("a5_iio")],
        examples = [("ex_ttf", ["ex_ttf.c"])])

Return("can_build")
