Import("context")
Import("env")
import addons, helpers, os

def getArgumentOption(name, default):
    arg = ARGUMENTS.get(name,default)
    if arg == "yes" or arg == "1":
        return 1
    return 0

def CheckOpenAL(context):
    context.Message("Checking for OpenAL... ")

    ret = context.TryAction('openal-config --libs')[0]
    if ret:
        context.env.ParseConfig('openal-config --libs')
        def add_al(env, output):
            output = "-I " + os.path.join(output.strip(), "AL")
            env.MergeFlags(output)
        context.env.ParseConfig('openal-config --includedir', add_al)
        ret = context.TryLink("""
            #include <al.h>
                int main(){
                ALenum al_error;
                return 0;
            }
            """, ".c");
    context.Result(ret)
    return ret

def CheckAlsa(context):
    context.Message("Checking for Alsa... ")

    ret = context.TryAction('pkg-config --libs --cflags alsa')[0]
    if ret:
        tmpEnv = context.env.Clone()
        context.env.ParseConfig('pkg-config --libs --cflags alsa')
        ret = context.TryLink("""
            #include <alsa/asoundlib.h>
            int main(){
                snd_pcm_t * x;
                return 0;
            }
            """, ".c");
        context.sconf.env = tmpEnv
    context.Result(ret)
    return ret

def CheckOSS(context):
    context.Message("Checking for OSS... ")
    ret = False
    return ret

noconfig = False
if not getArgumentOption("config",0):
    if os.path.exists("addons/kcm_audio/allegro5/internal/aintern_kcm_cfg.h"):
        # print "Re-using old kcm_audio settings"
        noconfig = True

settings = []
if noconfig:
    settings = helpers.readAutoHeader('addons/kcm_audio/allegro5/internal/aintern_kcm_cfg.h')
else:
	config = env.Configure(custom_tests =
	    {"CheckOpenAL": CheckOpenAL,
	     "CheckAlsa" : CheckAlsa,
	     "CheckOSS" : CheckOSS})
	settings = helpers.SimpleHash()
	settings["ALLEGRO_CFG_KCM_OPENAL"] = config.CheckOpenAL()
	settings["ALLEGRO_CFG_KCM_ALSA"] = config.CheckAlsa()
	a = settings["ALLEGRO_HAVE_SOUNDCARD_H"] = config.CheckCHeader("soundcard.h")
	b = settings["ALLEGRO_HAVE_SYS_SOUNDCARD_H"] = config.CheckCHeader("sys/soundcard.h")
	c = settings["ALLEGRO_HAVE_MACHINE_SOUNDCARD_H"] = config.CheckCHeader("machine/soundcard.h")
	d = settings["ALLEGRO_HAVE_LINUX_SOUNDCARD_H"] = config.CheckCHeader("linux/soundcard.h")
	settings["ALLEGRO_CFG_KCM_OSS"] = a or b or c or d
	myEnv = config.Finish()

helpers.parse_cmake_h(env,
    settings,
    "allegro5/internal/aintern_kcm_cfg.h.cmake",
    "allegro5/internal/aintern_kcm_cfg.h")

source = ["audio.c", "kcm_mixer.c", "kcm_sample.c", "kcm_stream.c",
    "kcm_voice.c"]

if settings["ALLEGRO_CFG_KCM_ALSA"]:
    source.append("alsa.c")

if settings["ALLEGRO_CFG_KCM_OPENAL"]:
    source.append("openal.c")

if settings["ALLEGRO_CFG_KCM_OSS"]:
    source.append("oss.c")

configs = []
can_build = True
if can_build:
    configs.extend(["pkg-config --libs alsa"])

    addons.do_build(
        context = context,
        env = env,
        source = source,
        dir = "kcm_audio",
        name = "a5_kcm_audio",
        install_headers = [
            "allegro5/kcm_audio.h",
            "allegro5/internal/aintern_kcm_audio.h",
            "allegro5/internal/aintern_kcm_cfg.h"],
        configs = configs)

Return("can_build")
