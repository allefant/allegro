Import("context")
import addons, helpers

configs = []

def CheckOpenAL(context):
    context.Message("Checking for OpenAL... ")

    ret = context.TryAction('openal-config --cflags --libs')[0]
    if ret:
        tmpEnv = context.env.Clone()
        context.env.ParseConfig('openal-config --cflags --libs')
        ret = context.TryLink("""
            #include <AL/al.h>
                int main(){
                ALenum al_error;
                return 0;
            }
            """, ".c");
        context.sconf.env = tmpEnv
    context.Result(ret)
    return ret

def CheckAlsa(context):
    context.Message("Checking for Alsa... ")

    ret = context.TryAction('pkg-config --libs --cflags alsa')[0]
    if ret:
        tmpEnv = context.env.Clone()
        context.env.ParseConfig('pkg-config --libs --cflags alsa')
        ret = context.TryLink("""
            #include <alsa/asoundlib.h>
            int main(){
                snd_pcm_t * x;
                return 0;
            }
            """, ".c");
        context.sconf.env = tmpEnv
    context.Result(ret)
    return ret

config = context.getLibraryEnv().Configure(custom_tests =
    {"CheckOpenAL": CheckOpenAL,
     "CheckAlsa" : CheckAlsa})
settings = helpers.SimpleHash()
settings["ALLEGRO_CFG_KCM_OPENAL"] = config.CheckOpenAL()
settings["ALLEGRO_CFG_KCM_ALSA"] = config.CheckAlsa()
config.Finish()

helpers.parse_cmake_h(context.getLibraryEnv(),
    settings,
    "#addons/kcm_audio/allegro5/internal/aintern_kcm_cfg.h.cmake",
    "#addons/kcm_audio/allegro5/internal/aintern_kcm_cfg.h")

source = ["alsa.c", "audio.c", "kcm_mixer.c", "kcm_sample.c", "kcm_stream.c",
    "kcm_voice.c", "openal.c"]
configs = []

can_build = True
if can_build:
    configs.extend(["openal-config --libs"])
    configs.extend(["pkg-config --libs alsa"])

    addons.do_build(
        context = context,
        source = source,
        dir = "kcm_audio",
        name = "kcm_audio",
        install_headers = [
            "allegro5/kcm_audio.h",
            "allegro5/internal/aintern_kcm_audio.h",
            "aintern_kcm_cfg.h"],
        configs = configs)

Return("can_build")
