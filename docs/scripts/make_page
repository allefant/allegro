#!/bin/sh
#
# SYNOPSIS
#
# make_page [OPTIONS...] INPUT-FILE... [--] [PANDOC-OPTIONS...]
#
# OPTIONS
#
# --protos FILE
# --postprocess latex
# --postprocess texinfo
#
# DESCRIPTION
#
# Preprocess input files before passing onto Pandoc.
# Input files may contain sections written as (with one or more hashes):
#
#       # API: foo
#
# In each case, the prototype or type declaration for `foo` will be inserted
# in place.  These come from $PROTOS which can be generated with another
# script.
#
# ENVIRONMENT VARIABLES
#
# - PANDOC
# - PROTOS
# - PREPROCESS_ONLY
#
# (For portability, stick to POSIX shell constructs in this script.)
#

set -e

PANDOC=${PANDOC:-pandoc}
PROTOS=${PROTOS:-protos}
PREPROCESS_ONLY=${PREPROCESS_ONLY:-n}

# Path to faster_search program.
FASTER_SEARCH=$(dirname "$0")/faster_search
if test ! -x "$FASTER_SEARCH"
then
    FASTER_SEARCH=
fi

# Speed up grep and sed.
export LC_ALL=C

rawecho() {
cat << EOF
$1
EOF
}

preprocess_page() {(
    IFS=
    while read -r line
    do
        case "$line" in
            *'# API: '*)
                name=${line#*API: }
                # POSIX shell doesn't have a way to remove substrings :(
                echo "$line" | sed 's/# API: /#/'
                echo
                get_prototype $name
                echo
                ;;
            -*)
                rawecho "$line"
                ;;
            *)
                echo "$line"
                ;;
        esac
    done
    echo
)}

get_prototype() {
    if test -n "$FASTER_SEARCH"
    then
        "$FASTER_SEARCH" "$PROTOS" "$1: " "    "
    else
        grep -e "^$1: " "$PROTOS" |
        sed -e "s/^$1: /    /"
    fi
}

POSTPROCESS=
POSTPROCESS_LATEX=$(dirname "$0")/postprocess_latex
postprocess_texinfo() {
    # Replace dummy references by real references (see make_dummy_refs
    # script).
    sed 's/@uref{DUMMY_REF,/@ref{/g'
}

# main

while true; do
    case $1 in
        --protos)
            PROTOS=$2
            shift 2
            ;;
        --postprocess)
            case $2 in
                latex)
                    POSTPROCESS=$POSTPROCESS_LATEX
                    shift 2
                    ;;
                texinfo)
                    POSTPROCESS=postprocess_texinfo
                    shift 2
                    ;;
                *)
                    echo "make_page: wrong --postprocess argument: $2" 1>&2
                    exit 1
                    ;;
            esac
            ;;
        *)
            break
            ;;
    esac
done

if test ! -f "$PROTOS"
then
    echo "Error: $PROTOS file not found."
    exit 1
fi

TEMPFILE=$(mktemp -t make_page.XXXXXX)
trap 'rm -f "$TEMPFILE"' 0 1 2 3 13 15

while true; do
    case $1 in
        --)
            shift
            break
            ;;
        -*|'')
            break
            ;;
        *)
            preprocess_page < "$1" >> "$TEMPFILE"
            shift
            ;;
    esac
done

case $PREPROCESS_ONLY in
    y*) cat $TEMPFILE
        exit 0
        ;;
esac

"$PANDOC" "$TEMPFILE" "$@"

# Stop now if post-processing is not required.
test -n "$POSTPROCESS" || exit 0

# Pandoc options to figure out where the output went.
OUTPUT=
while test $# -gt 0
do
    case $1 in
        -o|--output) OUTPUT=$2 ; shift ;;
        -o*)         OUTPUT=${1#-o} ;;
        --output=*)  OUTPUT=${1#--output=} ;;
    esac
    shift
done

# For simplicity, we only support post-processing if the output went to a file.
if test -n "$OUTPUT"
then
    "$POSTPROCESS" < "$OUTPUT" > $TEMPFILE
    cat < $TEMPFILE > "$OUTPUT"
fi

# vim: set et:
