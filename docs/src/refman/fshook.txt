# File system

These functions allow access to the filesystem. This can either be the real
filesystem like your harddrive, or a virtual filesystem like a .zip archive (or
whatever else you or an addon makes it do).

## API: ALLEGRO_FS_ENTRY

Opaque filesystem entry object.
Represents a file or a directory (check with [al_is_directory]
or [al_is_file]).
There are no user accessible member variables.

## API: ALLEGRO_FILE_MODE

Filesystem modes/types

* ALLEGRO_FILEMODE_READ - Readable
* ALLEGRO_FILEMODE_WRITE - Writable
* ALLEGRO_FILEMODE_EXECUTE - Executable
* ALLEGRO_FILEMODE_HIDDEN - Hidden
* ALLEGRO_FILEMODE_ISFILE - Regular file
* ALLEGRO_FILEMODE_ISDIR - Directory

## API: al_create_entry

Creates an [ALLEGRO_FS_ENTRY] object pointing to path.
'path' can be a file or a directory and must not be NULL.

## API: al_destroy_entry

Destroys a fs entry handle. The file or directory represented by it is not
destoyed.

Does nothing if passed NULL.

## API: al_remove_entry

"Unlink" or delete this file on disk.

Returns true on success, and false on failure, error is indicated in errno.

## API: al_remove_str

Unlink 'path' entry from disk. This is the same as [al_remove_entry], except
it expects the path as a string.

Returns true on success, and false on failure.

errno is filled in to indicate the error.

See Also:
[al_remove_entry]

## API: al_fstat

Updates stat info for entry 'fp'.

Returns true on success, false on failure.
Fills in errno to indicate the error.

See also [al_get_errno] [al_get_entry_atime] [al_get_entry_ctime] [al_is_directory]
[al_is_file] [al_get_entry_mode]

## API: al_is_present

Check if the given entry exists on disk.
Returns true if it does exist or false if it doesn't exist, or an error occured.
Error is indicated in errno.

## API: al_is_present_str

Check if entry 'path' exists on disk.

See Also:
[al_is_present]

## API: al_is_file

Return true iff this entry is a regular file.

## API: al_is_directory

Return true iff this entry is a directory.

## API: al_get_entry_mode

Returns the entry's mode flags.

See also: [al_get_errno]

See the [ALLEGRO_FILE_MODE] enum for valid flags.

## API: al_get_entry_atime

Returns the time in seonds since the epoch since the entry was last
accessed.

Warning: some filesystem either don't support this flag, or people turn it
off to increase performance.
It may not be valid in all circumstances.

## API: al_get_entry_ctime

Returns the time in seconds since the epoch this entry was created on the
filsystem.

## API: al_get_entry_mtime

Returns the time in seconds since the epoch since the entry was last
modified.

## API: al_get_entry_name

Returns the entry's filename path. Note that the path will not be an
absolute path if the entry wasn't created from an absolute path. Also not
that the filesystem encoding may not be known and the conversion to UTF-8
could in very rare cases cause this to return an invalid path. Therefore it's
always safest to access the file over its [ALLEGRO_FS_ENTRY] and not the path.

On success returns a read only path structure, which you must not modify or
destroy.  Returns NULL on failure; errno is set to indicate the error.

## API: al_get_entry_size

Returns the size, in bytes, of the given entry.

## Directory functions

### API: al_getcwd

Returns the path to the current working directory.

Returns NULL on failure.

errno is filled in to indicate the error.

Possible Errors:
* ERANGE - buffer is not large enough

See also: [al_get_errno]

### API: al_chdir

Changes the current working directory to 'path'.

Returns -1 on error.

### API: al_closedir

Closes a previously opened directory entry object.

Returns true on success, false on failure and fills in errno to indicate the
error.

### API: al_mkdir

Creates a new directory on disk given the path 'path'.

Returns false on error and fills in errno to indicate the error.

See also: [al_get_errno]

### API: al_opendir

Opens a directory entry object. You must call this before using [al_readdir]
on an entry and you must call [al_closedir] when you no longer need it.

Returns true on success.

### API: al_readdir

Reads the next dir item and returns a filesystem entry for it.

Returns NULL if there are no more entries or if an error occurs. Call
[al_closedir] on the directory handle when you are done.


## Alternative filesystem functions

By default, Allegro uses platform specific filesystem functions for things like
directory access. However if for example the files of your game are not in
the local filesystem but inside some file archive, you can provide your own
set of functions (or use an addon which does this for you, for example our
physfs addon allows access to the most common archive formats).

### API: ALLEGRO_FS_INTERFACE

The available functions you can provide for a filesystem. They are:

~~~
   ALLEGRO_FS_ENTRY *create(const char *path)

   ALLEGRO_PATH *getcwd, (void)
   bool chdir(const char *path)

   bool exists_str(const char *path)
   bool remove_str(const char *path)

   bool mkdir(const char *path)

   void destroy(ALLEGRO_FS_ENTRY *handle)

   ALLEGRO_PATH *fname(ALLEGRO_FS_ENTRY *handle)

   bool fstat(ALLEGRO_FS_ENTRY *handle)

   off_t  entry_size(ALLEGRO_FS_ENTRY *fh)
   uint32_t entry_mode(ALLEGRO_FS_ENTRY *fh)
   time_t entry_atime(ALLEGRO_FS_ENTRY *fh)
   time_t entry_mtime(ALLEGRO_FS_ENTRY *fh)
   time_t entry_ctime(ALLEGRO_FS_ENTRY *fh)

   bool exists(ALLEGRO_FS_ENTRY *fh)
   bool remove(ALLEGRO_FS_ENTRY *fh)

   bool opendir(ALLEGRO_FS_ENTRY *dir));
   ALLEGRO_FS_ENTRY *readdir(ALLEGRO_FS_ENTRY *dir)
   bool closedir(ALLEGRO_FS_ENTRY *dir)
~~~

### API: al_set_fs_interface

Set the ALLEGRO_FS_INTERFACE table for the calling thread.

See also: [al_store_state], [al_restore_state].

### API: al_get_fs_interface

Return a pointer to the ALLEGRO_FS_INTERFACE table in effect
for the calling thread.

See also: [al_store_state], [al_restore_state].

