# Memory

These functions are declared in the main Allegro header file:

    #include <allegro5/allegro.h>

## API: al_malloc

Like malloc() in the C standard library.  In the future we plan to allow the
user to customise the malloc/free functions used by Allegro, so it may hook
into another implementation.

This is a macro.

See also: [al_free], [al_realloc], [al_calloc], [al_malloc_with_context]

## API: al_free

Like free() in the C standard library.  This is required because:

-  On Windows a memory block allocated by one DLL must be freed from the same
   DLL.  In the few places where an Allegro function returns a pointer that
   must be freed, you must use al_free() for portability to Windows.

-  In the future we plan to allow the user to customise the malloc/free
   functions used by Allegro, so it may hook into another implementation.

This is a macro.

See also: [al_malloc], [al_free_with_context]

## API: al_realloc

Like realloc() in the C standard library.

This is a macro.

See also: [al_malloc], [al_realloc_with_context]

## API: al_calloc

Like calloc() in the C standard library.

This is a macro.

See also: [al_malloc], [al_calloc_with_context]

## API: al_malloc_with_context

This currently just calls malloc() from the Allegro library (this matters on
Windows).  The context arguments are not used yet.

Generally you should use the [al_malloc] macro.

## API: al_free_with_context

This currently just calls free() from the Allegro library (this matters on
Windows).  The context arguments are not used yet.

Generally you should use the [al_free] macro.

## API: al_realloc_with_context

This currently just calls realloc() from the Allegro library (this matters on
Windows).  The context arguments are not used yet.

Generally you should use the [al_realloc] macro.

## API: al_calloc_with_context

This currently just calls calloc() from the Allegro library (this matters on
Windows).  The context arguments are not used yet.

Generally you should use the [al_calloc] macro.

