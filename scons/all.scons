import os, helpers

Import('context')
Import('env')

def getOption(name, default = 0):
    return env[name]

def getLibraryName():
    return "%s-%s" % (context.libraryName("allegro"), context.getVersion())

def appendDir(directory, files):
    return [directory + "/" + x for x in files]

def buildLibrary():
    libraryEnv = env.Clone()
    libraryEnv.BuildDir('library', '#src', duplicate = 0)

    def change(source):
        return map( lambda f: f.replace('src/', 'library/'), source)

    return context.buildLibrary(env, getLibraryName(), change(context.getLibrarySource()))

installed = []
context.addFiles( context.cmake["ALLEGRO_SRC_FILES"] )
library = buildLibrary()
context.alias('allegro', library)

def demo(env):
    demoEnv = env.Clone()
    demoEnv.BuildDir('demo', '#demo', duplicate=0)
    demoEnv.Append(CPPPATH = 'demo/include')
    demoEnv.Append(CPPPATH = ['addons/font', 'addons/iio',
      'addons/kcm_audio', 'addons/acodec'])
    demo_cmake = helpers.read_cmake_list("demo/CMakeLists.txt")
    sources = demo_cmake["DEMO_SRCS"]
    if not context.isStatic():
        demoEnv.Replace(LIBS = [])
    demoEnv.Append(LIBS = [context.libraryName('a5_font')])
    demoEnv.Append(LIBS = [context.libraryName('a5_iio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_kcm_audio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_acodec')])
    demoEnv.Append(LIBS = ["GLU"])
    demoEnv.Append(LIBS = [getLibraryName()])
    demoEnv.Append(LIBPATH = ['addons/font/lib'])
    demoEnv.Append(LIBPATH = ['addons/acodec/lib'])
    demoEnv.Append(LIBPATH = ['addons/ttf/lib'])
    demoEnv.Append(LIBPATH = ['addons/iio/lib'])
    demoEnv.Append(LIBPATH = ['addons/kcm_audio/lib'])
    demoEnv.Append(LIBPATH = ['.'])
    demo = demoEnv.Program('demo/demo', appendDir('demo', sources))
    context.alias('all-demo', demo)
    return demo

def examples(env):
    examples = []
    exEnv = env.Clone()
    exEnv.Append(CPPPATH = ['addons/font', 'addons/iio', "addons/ttf",
        "addons/kcm_audio", "addons/acodec", "addons/color"])
    # exEnv.BuildDir('#examples', 'examples', duplicate = 0)
    # FIXME: those should be per-example..
    if not context.isStatic():
        exEnv.Replace(LIBS = [])

    # Should all the examples use the addon libraries?
    # If not then the libraries could be passed as a parameter to 'example'
    exEnv.Append(LIBS = [context.libraryName('a5_font')])
    exEnv.Append(LIBS = [context.libraryName('a5_iio')])
    exEnv.Append(LIBS = [context.libraryName('a5_ttf')])
    exEnv.Append(LIBS = [context.libraryName('a5_kcm_audio')])
    exEnv.Append(LIBS = [context.libraryName('a5_acodec')])
    exEnv.Append(LIBS = [context.libraryName('a5_color')])
    exEnv.Append(LIBS = [getLibraryName()])
    exEnv.Append(LIBPATH = ['addons/font/lib'])
    exEnv.Append(LIBPATH = ['addons/acodec/lib'])
    exEnv.Append(LIBPATH = ['addons/ttf/lib'])
    exEnv.Append(LIBPATH = ['addons/iio/lib'])
    exEnv.Append(LIBPATH = ['addons/kcm_audio/lib'])
    exEnv.Append(LIBPATH = ['addons/color/lib'])
    exEnv.Append(LIBPATH = ['.'])
    exEnv.Append(LIBS = ["GLU"])
    exEnv.BuildDir('examples', '#examples', duplicate = 0)
    ## Add an example
    ## name - filename of example and also the alias of the target
    ## files - list of files associated with the example
    def example(name, files = None, libs = []):
        if libs:
            myEnv = exEnv.Clone()
            myEnv.Append(LIBS = libs)
        else:
            myEnv = exEnv
        if files is None:
            files = [name + ".c"]
        example = myEnv.Program('examples/' + name, appendDir('examples/', files))
        context.alias(name, example)
        examples.append(example)

    example("ex_acodec")
    example("ex_acodec_multi")
    example("ex_audio_simple")
    example("ex_stream_file")
    example("ex_bitmap")
    example("ex_bitmap_flip")
    example("ex_bitmap_target")
    example("ex_blend")
    example("ex_blend2", files = ["ex_blend2.cpp", "nihgui.cpp"])
    example("ex_color", files = ["ex_color.cpp", "nihgui.cpp"])
    example("ex_config")
    example("ex_disable_screensaver")
    example("ex_drawpixels")
    example("ex_dualies")
    example("ex_expose")
    #example("ex_icodec")
    example("ex_font")
    example("ex_fs_resize")
    example("ex_glext", libs = ["GLU"])
    example("ex_icon")
    example("ex_keyboard_events")
    example("ex_keyboard_focus")
    example("ex_lines")
    example("ex_lockbitmap")
    example("ex_lockscreen")
    example("ex_membmp")
    example("ex_mixer_chain")
    example("ex_monitorinfo")
    example("ex_mouse")
    example("ex_mouse_cursor")
    example("ex_mouse_events")
    example("ex_multiwin")
    example("ex_noframe")
    example("ex_opengl")
    example("ex_pixelformat")
    example("ex_resize")
    example("ex_resize2")
    example("ex_saw")
    example("ex_scale")
    example("ex_subbitmap")
    example("ex_threads")
    example("ex_threads2")
    example("ex_timedwait")
    example("ex_timer")
    example("ex_ttf")
    example("ex_user_events")
    example("ex_windows")

    context.alias('all-examples', examples)
    return examples

def buildAddon(name):
    result = SConscript( dirs = ['#addons/%s' % name],
        build_dir = 'addons/%s' % name,
        exports = ['context','env'], duplicate = 0)
    if result:
        installed.extend(result)
    return result

def installLibrary(library):
    prefix = context.temporaryInstallDir()
    path = os.path.join(prefix, 'lib')
    #if not os.path.isabs(path):
    #    path = '#' + path
    return env.Install(path, library)

buildAddon("iio")
buildAddon('font')
buildAddon("ttf")
buildAddon("color")
if buildAddon("kcm_audio"):
    buildAddon('acodec')
#if buildAddon('audio'):

examples(env)
demo(env)

installed.append(installLibrary(library))
Return('installed')
