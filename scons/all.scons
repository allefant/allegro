import os

Import('context')

context.add_files(context.cmake["ALLEGRO_SRC_FILES"])

def tools(env,appendDir,buildDir,libDir):
    tools = []
    env.BuildDir(buildDir + 'tools', 'tools', duplicate = 0)
    def addTool(name,files):
        tool = env.Program('tools/' + name, appendDir(buildDir + '/tools/', files))
        Alias(name, tool)
        tools.append(tool)
    addTool('colormap', [ 'colormap.c' ])
    addTool('pack', [ 'pack.c' ])
    addTool('rgbmap', [ 'rgbmap.c' ])
    addTool('textconv', [ 'textconv.c' ])
    
    Alias('tools', tools)
    return tools

def tests(env,appendDir,buildDir,libDir):
    tests = []
    env.BuildDir(buildDir + 'tests', 'tests', duplicate = 0)
    def addTest(name,files):
        test = env.Program('tests/' + name, appendDir(buildDir + '/tests/', files))
        Alias(name, test)
        tests.append(test)
    addTest('afinfo', [ 'afinfo.c' ])
    addTest('akaitest', [ 'akaitest.c' ])
    addTest('digitest', [ 'digitest.c' ])
    addTest('filetest', [ 'filetest.c' ])
    addTest('gfxinfo', [ 'gfxinfo.c' ])
    addTest('mathtest', [ 'mathtest.c' ])
    addTest('miditest', [ 'miditest.c' ])
    addTest('play', [ 'play.c' ])
    addTest('playfli', [ 'playfli.c' ])
    addTest('test', [ 'test.c' ])
    addTest('vesainfo', [ 'vesainfo.c' ])
    addTest('cpptest', [ 'cpptest.cpp' ])
    Alias('tests', tests)
    return tests

def demo(env,appendDir,buildDir,libDir):
    demoEnv = env.Clone()
    demoEnv.Append( CPPPATH = 'demo/include' )
    demoEnv.Append(CPPPATH = ['addons/font', 'addons/iio',
      'addons/kcm_audio', 'addons/acodec'])
    sources = Split("""
       Asteroid.cpp
       BitmapResource.cpp
       Bullet.cpp
       ButtonWidget.cpp
       Debug.cpp
       DisplayResource.cpp
       Enemy.cpp
       Entity.cpp
       Error.cpp
       Explosion.cpp
       GUI.cpp
       GenericResource.cpp
       Input.cpp
       LargeAsteroid.cpp
       LargeBullet.cpp
       LargeSlowBullet.cpp
       MediumAsteroid.cpp
       Misc.cpp
       Player.cpp
       PowerUp.cpp
       Resource.cpp
       ResourceManager.cpp
       SampleResource.cpp
       SmallAsteroid.cpp
       SmallBullet.cpp
       UFO.cpp
       a5teroids.cpp
       collision.cpp
       logic.cpp
       render.cpp
       sound.cpp
       wave.cpp
    """);
    demoEnv.Append( LIBPATH = libDir )
    demoEnv.Append(LIBS = [context.libraryName('a5_font')])
    demoEnv.Append(LIBS = [context.libraryName('a5_iio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_kcm_audio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_acodec')])
    demo = demoEnv.Program('demo/demo', appendDir(buildDir + '/demo/src', sources))
    Alias('demo', demo)
    return demo

def examples(env,appendDir,buildDir,libDir):
    examples = []
    exEnv = env.Clone()
    exEnv.Append(CPPPATH = ['addons/font', 'addons/iio'])
    exEnv.BuildDir(buildDir + 'examples', 'examples', duplicate = 0)
    # FIXME: those should be per-example..
    exEnv.Append(LIBS = [context.libraryName('a5_font')])
    exEnv.Append(LIBS = [context.libraryName('a5_iio')])
    exEnv.Append(LIBS = ["GLU"])
    ## Add an example
    ## name - filename of example and also the alias of the target
    ## files - list of files associated with the example
    def example(name, files = None, libs = []):
        if files is None:
            files = [name + ".c"]
        example = exEnv.Program('examples/' + name, appendDir(buildDir + '/examples/', files))
        Alias(name, example)
        examples.append(example)

    example("ex_bitmap")
    example("ex_bitmap_target")
    example("ex_blend")
    example("ex_drawpixels")
    example("ex_dualies")
    example("ex_events")
    example("ex_expose")
    example("ex_fs_resize")
    example("ex_glext", libs = ["GLU"])
    example("ex_icon")
    example("ex_lines")
    example("ex_lockbitmap")
    example("ex_lockscreen")
    example("ex_membmp")
    example("ex_monitorinfo")
    example("ex_mouse")
    example("ex_mouse_cursor")
    example("ex_mouse_events")
    example("ex_multiwin")
    example("ex_noframe")
    example("ex_opengl")
    example("ex_resize")
    example("ex_resize2")
    example("ex_scale")
    example("ex_threads")
    example("ex_threads2")
    example("ex_timedwait")
    example("ex_timer")
    example("ex_windows")

    Alias('examples', examples)
    return examples

def addons(env, appendDir, buildDir, libDir):
    examples = []
    print buildDir, libDir
    def addAddonExample(name, files):
        example = env.Program("addons/" + name, appendDir(buildDir + '/addons/', files))
        Alias(name, example)
        examples.append(example)
    addAddonExample("font/ex", ["font/font.c", "font/ex_font.c",
        "font/fontbmp.c", "font/readfont.c", "font/text.c"])
    return examples

def buildAddon(name):
    return SConscript( dirs = ['#addons/%s' % name],exports='context')

buildAddon("iio")
buildAddon('font')
buildAddon("ttf")
if buildAddon("kcm_audio"):
    buildAddon('acodec')
#if buildAddon('audio'):

# addon_dirs = ['#addons/font','#addons/acodec','#addons/audio']
# SConscript( dirs = addon_dirs, exports = 'context' )

context.addExtra(demo)
context.addExtra(examples)
# context.addExtra(addons)
# context.addExtra(tools)
# context.addExtra(tests)
