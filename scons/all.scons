import os

Import('context')
Import('env')

context.addFiles( context.cmake["ALLEGRO_SRC_FILES"] )

def getLibraryName():
    return "%s-%s" % (context.libraryName("alleg"), context.getVersion())

def appendDir(directory, files):
    return [directory + "/" + x for x in files]

def buildLibrary():
    libraryEnv = env.Clone()
    libraryEnv.BuildDir('library', '#src')

    def change(source):
        return map( lambda f: f.replace('src/', 'library/'), source)

    return context.buildLibrary(env, getLibraryName(), change(context.getLibrarySource()))

def buildLibrary2():
            
    menv = context.getLibraryEnv()
    # menv.BuildDir('library', '#src')
    
    def source(dest_dir):
        def change(f):
            # return f.replace('src/','library/')
            return f.replace('src/','%s/' % dest_dir)
        return map( change, context.getFiles() )

    def build(function, lib, d):
        #library = menv.SharedLibrary( getLibraryName(context.isDebug(), context.isStatic()), map( change, context.getFiles() ) )
       return function(lib, source(d))

    def buildStatic(env, debug, d):
        env.BuildDir(d, '#src', duplicate = 0)
        # return build(env.StaticLibrary, self.libDir + '/static/' + getLibraryName(debug), d)
        return build(env.StaticLibrary, getLibraryName(debug,True), d)

    def buildShared(env, debug, d):
        env.BuildDir(d, '#src', duplicate = 0)
        # return build(env.SharedLibrary, self.libDir + '/shared/' + getLibraryName(debug), d)
        return build(env.SharedLibrary, getLibraryName(debug,False), d)

    debugEnv = menv.Clone()
    debugEnv.Append(CCFLAGS = '-DDEBUGMODE=1')

    debugStatic = buildStatic(debugEnv, 1, 'debug')
    debugShared = buildShared(debugEnv, 1, 'debug')
    normalStatic = buildStatic(menv, 0, 'release')
    normalShared = buildShared(menv, 0, 'release')

    Alias('debug-static', debugStatic)
    Alias('debug-shared', debugShared)
    Alias('static', normalStatic)
    Alias('shared', normalShared)

    if context.isDebug() and context.isStatic():
        return debugStatic
    elif context.isDebug():
        return debugShared
    elif context.isStatic():
        return normalStatic
    else:
        return normalShared

#library = menv.SharedLibrary( getLibraryName(context.isDebug(), context.isStatic()), map( change, context.getFiles() ) )
# library = buildLibrary()

# library = context.buildLibrary(context.getEnv(), getLibraryName(), context.getLibrarySource())
library = buildLibrary()
context.alias('allegro', library)

def tools(env,appendDir,buildDir,libDir):
    tools = []
    env.BuildDir(buildDir + 'tools', 'tools', duplicate = 0)
    def addTool(name,files):
        tool = env.Program('tools/' + name, appendDir(buildDir + '/tools/', files))
        Alias(name, tool)
        tools.append(tool)
    addTool('colormap', [ 'colormap.c' ])
    addTool('pack', [ 'pack.c' ])
    addTool('rgbmap', [ 'rgbmap.c' ])
    addTool('textconv', [ 'textconv.c' ])
    
    Alias('tools', tools)
    return tools

def tests(env):
    tests = []
    testEnv = env.Clone()
    testEnv.BuildDir('tests', '#tests', duplicate = 0)
    testEnv.Append(LIBPATH = ['.'])
    testEnv.Replace(LIBS = [getLibraryName(context.isDebug(), context.isStatic())])
    def addTest(name,files):
        test = testEnv.Program('#tests/' + name, map(lambda f: ('tests/%s' % f), files))
        Alias(name, test)
        tests.append(test)
    # addTest('afinfo', [ 'afinfo.c' ])
    addTest('akaitest', [ 'akaitest.c' ])
    addTest('digitest', [ 'digitest.c' ])
    addTest('filetest', [ 'filetest.c' ])
    addTest('gfxinfo', [ 'gfxinfo.c' ])
    addTest('mathtest', [ 'mathtest.c' ])
    addTest('miditest', [ 'miditest.c' ])
    addTest('play', [ 'play.c' ])
    addTest('playfli', [ 'playfli.c' ])
    addTest('test', [ 'test.c' ])
    addTest('vesainfo', [ 'vesainfo.c' ])
    addTest('cpptest', [ 'cpptest.cpp' ])
    Alias('tests', tests)
    return tests

def demo(env):
    demoEnv = env.Clone()
    demoEnv.BuildDir('demo', '#demo', duplicate=0)
    demoEnv.Append(CPPPATH = 'demo/include')
    demoEnv.Append(CPPPATH = ['addons/font', 'addons/iio',
      'addons/kcm_audio', 'addons/acodec'])
    sources = Split("""
       Asteroid.cpp
       BitmapResource.cpp
       Bullet.cpp
       ButtonWidget.cpp
       Debug.cpp
       DisplayResource.cpp
       Enemy.cpp
       Entity.cpp
       Error.cpp
       Explosion.cpp
       GUI.cpp
       GenericResource.cpp
       Input.cpp
       LargeAsteroid.cpp
       LargeBullet.cpp
       LargeSlowBullet.cpp
       MediumAsteroid.cpp
       Misc.cpp
       Player.cpp
       PowerUp.cpp
       Resource.cpp
       ResourceManager.cpp
       SampleResource.cpp
       SmallAsteroid.cpp
       SmallBullet.cpp
       UFO.cpp
       a5teroids.cpp
       collision.cpp
       logic.cpp
       render.cpp
       sound.cpp
       wave.cpp
    """);
    # demoEnv.Append(LIBPATH = libDir)
    if context.isStatic():
        demoEnv.Append(LIBS = [getLibraryName()])
    else:
        demoEnv.Replace(LIBS = [getLibraryName()])
    demoEnv.Append(LIBS = [context.libraryName('a5_font')])
    demoEnv.Append(LIBS = [context.libraryName('a5_iio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_kcm_audio')])
    demoEnv.Append(LIBS = [context.libraryName('a5_acodec')])
    demoEnv.Append(LIBPATH = ['addons/font/lib'])
    demoEnv.Append(LIBPATH = ['addons/acodec/lib'])
    demoEnv.Append(LIBPATH = ['addons/ttf/lib'])
    demoEnv.Append(LIBPATH = ['addons/iio/lib'])
    demoEnv.Append(LIBPATH = ['addons/kcm_audio/lib'])
    demoEnv.Append(LIBPATH = ['.'])
    demo = demoEnv.Program('demo/demo', appendDir('demo/src', sources))
    context.alias('all-demo', demo)
    return demo

def examples(env):
    examples = []
    exEnv = env.Clone()
    exEnv.Append(CPPPATH = ['addons/font', 'addons/iio', "addons/ttf",
        "addons/kcm_audio", "addons/acodec"])
    # exEnv.BuildDir('#examples', 'examples', duplicate = 0)
    # FIXME: those should be per-example..
    if not context.isStatic():
        exEnv.Replace(LIBS = [])

    # Should all the examples use the addon libraries?
    # If not then the libraries could be passed as a parameter to 'example'
    exEnv.Append(LIBS = [context.libraryName('a5_font')])
    exEnv.Append(LIBS = [context.libraryName('a5_iio')])
    exEnv.Append(LIBS = [context.libraryName('a5_ttf')])
    exEnv.Append(LIBS = [context.libraryName('a5_kcm_audio')])
    exEnv.Append(LIBS = [context.libraryName('a5_acodec')])
    exEnv.Append(LIBS = [getLibraryName()])
    exEnv.Append(LIBPATH = ['addons/font/lib'])
    exEnv.Append(LIBPATH = ['addons/acodec/lib'])
    exEnv.Append(LIBPATH = ['addons/ttf/lib'])
    exEnv.Append(LIBPATH = ['addons/iio/lib'])
    exEnv.Append(LIBPATH = ['addons/kcm_audio/lib'])
    exEnv.Append(LIBPATH = ['.'])
    exEnv.Append(LIBS = ["GLU"])
    exEnv.BuildDir('examples', '#examples', duplicate = 0)
    ## Add an example
    ## name - filename of example and also the alias of the target
    ## files - list of files associated with the example
    def example(name, files = None, libs = []):
        myEnv = exEnv.Clone()
        myEnv.Append(LIBS = libs)
        if files is None:
            files = [name + ".c"]
        example = myEnv.Program('examples/' + name, appendDir('examples/', files))
        context.alias(name, example)
        examples.append(example)

    example("ex_acodec")
    example("ex_acodec_multi")
    example("ex_stream_file")
    example("ex_bitmap")
    example("ex_bitmap_target")
    example("ex_blend")
    example("ex_drawpixels")
    example("ex_dualies")
    example("ex_events")
    example("ex_expose")
    example("ex_font")
    example("ex_fs_resize")
    example("ex_glext", libs = ["GLU"])
    example("ex_icon")
    example("ex_lines")
    example("ex_lockbitmap")
    example("ex_lockscreen")
    example("ex_membmp")
    example("ex_monitorinfo")
    example("ex_mouse")
    example("ex_mouse_cursor")
    example("ex_mouse_events")
    example("ex_multiwin")
    example("ex_noframe")
    example("ex_opengl")
    example("ex_resize")
    example("ex_resize2")
    example("ex_saw")
    example("ex_scale")
    example("ex_threads")
    example("ex_threads2")
    example("ex_timedwait")
    example("ex_timer")
    example("ex_ttf")
    example("ex_windows")

    context.alias('all-examples', examples)
    return examples

def buildAddon(name):
    return SConscript( dirs = ['#addons/%s' % name],
        build_dir = 'addons/%s' % name,
        exports = ['context','env'], duplicate = 0)

buildAddon("iio")
buildAddon('font')
buildAddon("ttf")
if buildAddon("kcm_audio"):
    buildAddon('acodec')
#if buildAddon('audio'):

# addon_dirs = ['#addons/font','#addons/acodec','#addons/audio']
# SConscript( dirs = addon_dirs, exports = 'context' )

examples(env)
demo(env)
# tests(context.getLibraryEnv())

# Alias('library', library)
# Default(['allegro','all-examples','all-addons','all-demo'])
Return('library')

#context.addExtra(demo)
# context.addExtra(examples)
# context.addExtra(addons)
# context.addExtra(tools)
# context.addExtra(tests)
