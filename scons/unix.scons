# vi: syntax=python
Import('context')

import os, ConfigParser, re
import checks, helpers


context.setLibraryDir("lib/unix")

opts = Options(context.build_dir + "/options-unix.py", ARGUMENTS)
opts.Add('color8', 'Enable 8 bit color', 1)
opts.Add('color16', 'Enable 16 bit color', 1)
opts.Add('color24', 'Enable 24 bit color', 1)
opts.Add('color32', 'Enable 32 bit color', 1)
opts.AddOptions(PathOption('install', 'Installation directory', '/usr/local'))
opts.Add('magic_main', 'Use magic main', 0)
opts.Add('no_asm', 'Disable asm', 1)
opts.Add('vbeaf', 'Enable VBEAF', 0)
opts.Add('vga', 'Enable VGA', 0)
opts.Update(context.getLibraryEnv())
opts.Save(context.build_dir + "/options-unix.py", context.getLibraryEnv())
Help(opts.GenerateHelpText(context.getLibraryEnv()))
Help("""
config: (Re)configure Allegro. You will need to set this to 1 if you wish to enable/disable parts of allegro such as color8=0
    default: 0
    actual: 0
""");

# print context.getLibraryEnv()['install']

def isStatic():
    return int(context.getLibraryEnv()['static']) == 1

def getOption(name, default = 0):
    return context.getLibraryEnv()[name]

def getArgumentOption(name, default):
    arg = ARGUMENTS.get(name,default)
    if arg == "yes" or arg == "1":
        return 1
    return 0

config = getArgumentOption('config','0')

def OnX86():
    uname = os.uname()
    return re.match(r"i\d86", uname[4])

def EnableVBEAF():
    if OnX86() and getOption("vbeaf", "no"):
        return 1
    return 0

def EnableVGA():
    if OnX86() and getOption("vga", "no"):
        return 1
    return 0

def writeAutoHeader(filename, platform):
    def defined(name, use):
        if use:
            if use == True: return "#define " + name
            else: return "#define " + name + " " + str(use) + "\n"
        else:
            return "/* #undef " + name + " */\n"
    file = open(filename, "w")
    file.write("/* Generated by scons build system. Don't touch */\n")
    for name in platform.keys():
        use, description = platform[name]
        file.write("/* " + description + " */\n")
        file.write(defined(name, use))
        file.write("\n")
    file.close()

# With the noconfig option, simply re-use the last config if one is available.
# Should this be default?
# 2/19/2006 - Only configure if config=1 is given or the .h/.cfg file is missing
noconfig = False
if not getArgumentOption("config",0):
    if os.path.exists("include/allegro5/platform/alunixac.h") and \
        os.path.exists(context.build_dir + "/settings.cfg"):
        print "Re-using old settings"
        noconfig = True

unixLibs = [ 'm', 'pthread' ]

# the settings we cache in settings.cfg
config_settings = ["CCFLAGS", "CPPPATH", "CPPFLAGS", "LIBS", "LIBPATH", "LINKFLAGS"]
platform = helpers.SimpleHash()
settings = ConfigParser.ConfigParser()

## The platform variable will hold all configuration things we care about
## so that alunixac.h can be written
if noconfig:
    platform = helpers.readAutoHeader("include/allegro5/platform/alunixac.h")
    settings.read(context.build_dir + "/settings.cfg")
    env = context.getLibraryEnv()
    for setting in config_settings:
        try:
            eval("env.Append(%s = %s)" % (
                setting, settings.get("unix", setting)))
        except ConfigParser.NoOptionError:
            pass
else:
    tests = {}
    # import all functions from checks.py as custom SCons checks
    for check in [x for x in dir(checks) if callable(getattr(checks, x))]:
        tests[check] = getattr(checks, check)

    config = context.getLibraryEnv().Configure(custom_tests = tests)

    machine = "i386"
    archFlag = "-mcpu="
    useArch = False
    if config.CheckIntel():
        machine = "pentium"
        useArch = True

    if config.CheckAMD64():
        machine = "k8"
        useArch = True

    if config.CheckMTune(machine):
        archFlag = '-mtune='

    if useArch:
        config.env.Append( CCFLAGS = [archFlag + machine] )

    config.CheckLib("m", "sin")
    platform["ALLEGRO_ALSA_VERSION"] = config.AlsaVersion()
    platform["ALLEGRO_ASM_PREFIX"] = config.CheckASMUnderscores()
    platform["ALLEGRO_BIG_ENDIAN"] = config.CheckBigEndian()
    platform["ALLEGRO_COLOR16"] = getOption("color16", "yes")
    platform["ALLEGRO_COLOR24"] = getOption("color24", "yes")
    platform["ALLEGRO_COLOR32"] = getOption("color32", "yes")
    platform["ALLEGRO_COLOR8"] = getOption("color8", "yes")
    platform["ALLEGRO_DARWIN"] = config.CheckDarwin()
    platform["ALLEGRO_HAVE_GETEXECNAME"] = config.CheckFunc("getexecname")
    platform["ALLEGRO_HAVE_PROCFS_ARGCV"] = config.CheckProcFSArgCV()
    platform["ALLEGRO_LINUX"] = config.CheckLinux()
    platform["ALLEGRO_LINUX_FBCON"] = config.CheckFBCon()
#    platform["ALLEGRO_LINUX_SVGALIB"] = config.CheckLib("vga", "vga_init")
#    platform["ALLEGRO_LINUX_SVGALIB_HAVE_VGA_VERSION"] = config.CheckSVGALibVersion()
    platform["ALLEGRO_LINUX_VBEAF"] = EnableVBEAF()
    platform["ALLEGRO_LINUX_VGA"] = EnableVGA()
    platform["ALLEGRO_LITTLE_ENDIAN"] = config.CheckLittleEndian()
    platform["ALLEGRO_MMX"] = config.CheckMMX()
    platform["ALLEGRO_NO_ASM"] = getOption("no_asm", "yes")
    platform["ALLEGRO_SSE"] = config.CheckSSE()
    platform["ALLEGRO_USE_CONSTRUCTOR"] = config.CheckConstructor()
    platform["ALLEGRO_USE_SCHED_YIELD"] = config.CheckLib(["c", "posix4", "rt"], "sched_yield")
    platform["ALLEGRO_WITH_ALSADIGI"] = config.CheckALSADigi()
    platform["ALLEGRO_WITH_ALSAMIDI"] = config.CheckALSAMidi()
    platform["ALLEGRO_WITH_JACKDIGI"] = config.CheckJackDigi()
    platform["ALLEGRO_WITH_MAGIC_MAIN"] = getOption("magic_main", "no")

    platform["ALLEGRO_WITH_XWINDOWS"] = config.CheckForX()
    platform["ALLEGRO_XWINDOWS_WITH_SHM"] = config.CheckLib("Xext", "XShmQueryExtension")
    platform["ALLEGRO_XWINDOWS_WITH_XCURSOR"] = config.CheckXCursor()
    platform["ALLEGRO_XWINDOWS_WITH_XF86DGA2"] = config.CheckLib("Xxf86dga", "XDGAQueryExtension")
    platform["ALLEGRO_XWINDOWS_WITH_XF86VIDMODE"] = config.CheckLib("Xxf86vm", "XF86VidModeQueryExtension")
    platform["ALLEGRO_XWINDOWS_WITH_XPM"] = config.CheckLib("Xpm", "XpmCreatePixmapFromData")
    platform["ALLEGRO_XWINDOWS_WITH_XIM"] = config.CheckLib("X11", "XOpenIM")
    platform["ALLEGRO_GLX"] = config.CheckForGLX()
    platform["ALLEGRO_HAVE_DIRENT_H"] = config.CheckCHeader("dirent.h")
    platform["ALLEGRO_HAVE_DLFCN_H"] = config.CheckCHeader("dlfcn.h")
    platform["ALLEGRO_HAVE_FCNTL_H"] = config.CheckCHeader("fcntl.h")
    platform["ALLEGRO_HAVE_INTTYPES_H"] = config.CheckCHeader("inttypes.h")
    platform["ALLEGRO_HAVE_LIBOSSAUDIO"] = config.CheckLib("ossaudio", "_oss_ioctl")
    platform["ALLEGRO_HAVE_LIBPTHREAD"] = config.CheckLib("pthread", "pthread_create")
    platform["ALLEGRO_HAVE_LIMITS_H"] = config.CheckCHeader("limits.h")
    platform["ALLEGRO_HAVE_LINUX_AWE_VOICE_H"] = config.CheckCHeader("linux/awe_voice.h")
    platform["ALLEGRO_HAVE_LINUX_INPUT_H"] = config.CheckCHeader("linux/input.h")
    platform["ALLEGRO_HAVE_LINUX_JOYSTICK_H"] = config.CheckCHeader("linux/joystick.h")
    platform["ALLEGRO_HAVE_LINUX_SOUNDCARD_H"] = config.CheckCHeader("linux/soundcard.h")
    platform["ALLEGRO_HAVE_MACHINE_SOUNDCARD_H"] = config.CheckCHeader("machine/soundcard.h")
    platform["ALLEGRO_HAVE_MEMCMP"] = config.CheckLib("c", "memcmp")
    platform["ALLEGRO_HAVE_MEMORY_H"] = config.CheckCHeader("memory.h")
    platform["ALLEGRO_HAVE_MKSTEMP"] = config.CheckLib("c", "mkstemp")
    platform["ALLEGRO_HAVE_MMAP"] = config.CheckLib("c", "mmap")
    platform["ALLEGRO_HAVE_NDIR_H"] = config.CheckCHeader("ndir.h")
    platform["ALLEGRO_HAVE_SOUNDCARD_H"] = config.CheckCHeader("soundcard.h")
    platform["ALLEGRO_HAVE_STDBOOL_H"] = config.CheckCHeader("stdbool.h")
    platform["ALLEGRO_HAVE_STDINT_H"] = config.CheckCHeader("stdint.h")
    platform["ALLEGRO_HAVE_STDLIB_H"] = config.CheckCHeader("stdlib.h")
    platform["ALLEGRO_HAVE_STRICMP"] = config.CheckLib("c", "stricmp")
    platform["ALLEGRO_HAVE_STRINGS_H"] = config.CheckCHeader("strings.h")
    platform["ALLEGRO_HAVE_STRING_H"] = config.CheckCHeader("string.h")
    platform["ALLEGRO_HAVE_STRLWR"] = config.CheckLib("c", "strlwr")
    platform["ALLEGRO_HAVE_STRUPR"] = config.CheckLib("c", "strup")
    platform["ALLEGRO_HAVE_SYS_DIR_H"] = config.CheckCHeader("sys/dir.h")
    platform["ALLEGRO_HAVE_SYS_IO_H"] = config.CheckCHeader("sys/io.h")
    platform["ALLEGRO_HAVE_SYS_NDIR_H"] = config.CheckCHeader("sys/ndir.h")
    platform["ALLEGRO_HAVE_SYS_SOUNDCARD_H"] = config.CheckCHeader("sys/soundcard.h")
    platform["ALLEGRO_HAVE_SYS_STAT_H"] = config.CheckCHeader("sys/stat.h")
    platform["ALLEGRO_HAVE_SYS_TIME_H"] = config.CheckCHeader("sys/time.h")
    platform["ALLEGRO_HAVE_SYS_TYPES_H"] = config.CheckCHeader("sys/types.h")
    platform["ALLEGRO_HAVE_SYS_UTSNAME_H"] = config.CheckCHeader("sys/utsname.h")
    platform["ALLEGRO_HAVE_VPRINTF"] = config.CheckLib("c", "vprintf")
    platform["ALLEGRO_HAVE__BOOL"] = config.CheckCHeader("stdbool.h")
    platform["MAP_FAILED"] = config.CheckMapFailed()
    platform["ALLEGRO_WITH_OSSDIGI"] = config.CheckOSSDigi()
    platform["ALLEGRO_WITH_OSSMIDI"] = config.CheckOSSMidi()
    platform["ALLEGRO_HAVE_DYNAMIC_LINK"] = config.CheckDL()

    ## Not checked yet
    platform["ALLEGRO_MODULES_PATH"] = '"/usr/local/lib/allegro"'
    platform["PACKAGE_BUGREPORT"] = ""
    platform["ALLEGRO_WITH_MODULES"] = "1"
    platform["PACKAGE_NAME"] = ""
    platform["PACKAGE_STRING"] = ""
    platform["PACKAGE_TARNAME"] = ""
    platform["PACKAGE_VERSION"] = ""
    platform["RETSIGTYPE"] = "void"
    platform["STDC_HEADERS"] = "1"
    platform["TIME_WITH_SYS_TIME"] = "1"
    platform["TM_IN_SYS_TIME"] = False
    platform["ALLEGRO_WITH_SGIALDIGI"] = False
    platform["WORDS_BIGENDIAN"] = False
    platform["const"] = False

    platform["ALLEGRO_HAVE_SV_PROCFS"] = False

    context.setLibraryEnv(config.Finish())
    env = context.getLibraryEnv()

    # Write out alunixac.h with all the config settings
    # writeAutoHeader("include/allegro5/platform/alunixac.h", platform)
    helpers.parse_cmake_h(env,platform,'#include/allegro5/platform/alunixac.h.cmake','#include/allegro5/platform/alunixac.h')

    # write out settings.cfg with scons specific settings
    settings.add_section("unix")
    for setting in config_settings:
        val = env.get(setting, None)
        if not val: continue
        if hasattr(val, "data"): val = val.data # for CCFLAGS
        if not type(val) == list: val = [val]
        settings.set("unix", setting, str(val))
    settings.write(file(context.build_dir + "/settings.cfg", "w"))

# alplatf_h = helpers.generate_alplatf_h(env, ["ALLEGRO_UNIX"])
platf_settings = helpers.define("ALLEGRO_UNIX","ALLEGRO_CFG_OPENGL")
# platf_settings = helpers.SimpleHash()
# platf_settings[ "ALLEGRO_UNIX" ] = True
# platf_settings[ "ALLEGRO_NO_ASM" ] = True
alplatf_h = helpers.parse_cmake_h(env, platf_settings, '#include/allegro5/platform/alplatf.h.cmake', '#include/allegro5/platform/alplatf.h')
        
# env.Depends(alplatf_h, env.Program('dummy','#src/unix/dummy.c'))

# Maybe setting up the assembler should be in a gcc.scons or something?
import SCons.Tool

AssemblerAction = Action( 'gcc -x assembler-with-cpp $CCFLAGS $_CPPINCFLAGS $SOURCES -c -o $TARGET' )

static_obj, shared_obj = SCons.Tool.createObjBuilders(context.getLibraryEnv())
shared_obj.add_action('.s', AssemblerAction )
shared_obj.add_emitter('.s', SCons.Defaults.SharedObjectEmitter )
static_obj.add_action( '.s', AssemblerAction )
static_obj.add_emitter( '.s', SCons.Defaults.StaticObjectEmitter )
SourceFileScanner.add_scanner('.s', SCons.Scanner.C.CScanner() )

flags = ["-Wall", "-Wno-unused", "-funroll-loops", "-ffast-math", "-fomit-frame-pointer"]
includes = ["#include", "#include/allegro5", "."]
defines = ["ALLEGRO_LIB_BUILD", "ALLEGRO_SRC"]

if context.getDebug():
    flags += ["-g"]
else:
    flags += ["-O2"]

env.Append(CCFLAGS = flags)
env.Append(CPPDEFINES = defines)
env.Append(CPPPATH = includes)

# This is where the source for the unix files comes from
context.add_files(context.cmake["ALLEGRO_SRC_C_FILES"])
context.add_files(context.cmake["ALLEGRO_SRC_OPENGL_FILES"])
unixfiles = context.cmake["ALLEGRO_SRC_UNIX_FILES"]

#FIXME: Didn't we say no more asm in A5?
# Build asmdef. In the future asmdef.inc can probably be built directly by scons
# instead of building the asmdef program.
#asmdefEnv = Environment()
#asmdef_inc = '#obj/unix/asmdef.inc'
#asmdefEnv.Append(CPPPATH = '#include')
#asmdefEnv.BuildDir('#build','#src')
#asmdef = asmdefEnv.Program('#build/asmdef', '#build/i386/asmdef.c')
#asmdefEnv.Command(asmdef_inc,asmdef,'$SOURCE $TARGET')

context.add_files(unixfiles)

def supportModules():
    return True

modules = []

if platform["ALLEGRO_LINUX_FBCON"]:
    def buildFBCon(menv,appendDir,buildDir,libDir):
        sources = ["fbcon.c"]
        lib = menv.SharedLibrary(libDir + "/alleg-fbcon",appendDir(buildDir + "/src/linux/", sources))
        modules.append(lib)
        return lib
    context.addExtra(buildFBCon, depends = True)

def haveXWindows():
    return platform["ALLEGRO_WITH_XWINDOWS"]

if haveXWindows():
    context.add_files(context.cmake["ALLEGRO_SRC_X_FILES"])

    def tools(tenv,appendDir,buildDir,libDir):
        tools = []
        def addTool(name,files):
            tool = tenv.Program("tools/" + name, appendDir(buildDir + "/tools/", files))
            Alias(name, tool)
            tools.append(tool)
        # addTool("x11/xf2pcx", ["x11/xf2pcx.c"])
        Alias("tools", tools)
        return tools

    context.addExtra(tools, depends = True)

## return a list of modules
def getModules():
    return modules

def allegroConfig(env, appendDir, buildDir, libDir):
    """Builds the allegro5-config shell script out of misc/allegro5-config.in"""
    prefix = ARGUMENTS.get('install', '/usr/local')
    replaces = {}
    replaces[ '@prefix@' ] = prefix
    replaces[ '@INCLUDE_PREFIX@' ] = prefix
    replaces[ '@includedir@' ] = os.path.join(prefix, "include")
    replaces[ '@libdir@' ] = os.path.join(prefix, "lib")
    replaces[ '@bindir@' ] = os.path.join(prefix, "bin")
    replaces[ '@LINK_WITH_STATIC_LIBS@' ] = 'no'
    replaces[ '@LIB_TO_LINK@' ] = 'alleg'
    ldflags = ''
    if supportModules():
        ldflags = '-Wl,--export-dynamic'
    replaces[ '@LDFLAGS@' ] = ldflags
    libs = env["LIBS"]
    replaces[ '@LIBS@' ] = ' '.join(['-l' + str(x) for x in libs])
    replaces[ '@FRAMEWORKS@' ] = ''
    replaces[ '^version=.*' ] = 'version=%s' % context.getVersion()

    def replaceVars(target, source, env):
        writer = open( target[0].path, 'w' )
        for line in file(source[0].path):
            for k in replaces.keys():
                regex = re.compile(k)
                line = regex.sub(replaces[k], line)

            writer.write( line )

        writer.close()
        Execute(Chmod(target[0].path, 0755))
        return 0

    # A new builder who calls the 'replaceVas' function to build the target.
    configure = Builder( action = replaceVars )
    # Add the builder to scons.
    env.Append(BUILDERS = { "ConfigMaker" : configure })
    # Return an instance of the builder, passing destination and source file.
    return env.ConfigMaker( 'allegro5-config', '#misc/allegro5-config.in' )

def install(library):
    env = context.getLibraryEnv()
    ## list of files to be installed
    ret = []
    ## add a file to be installed
    def add(d, f):
        prefix = getOption('install')
        path = os.path.join(prefix, d)
        ret.append(env.Install(path, f))
    add('lib', library)
    for root, dirs, files in os.walk('include'):
        for i in [x for x in files if x.endswith(".h") or x.endswith(".inl")]:
            subdir = root
            add(subdir, '#' + os.path.join(root, i))

    add('lib/allegro/%s.%s' % (context.getMajorVersion(),context.getMinorVersion()), 'modules.lst')
    for i in getModules():
        add('lib/allegro/%s.%s' % (context.getMajorVersion(),context.getMinorVersion()),i)
    add('bin', 'allegro5-config')
    
    # Try to run ldconfig after installing everything, so add it as a dependency
    # depending on everything else.
    ldconfig = env.Command(None, ret, "ldconfig")
    env.Depends(ldconfig, ret)
    ret.append(ldconfig)

    return ret

context.setInstaller(install)
    
# context.addExtra(allegroConfig, use_build_env = True)
allegroConfig( context.getLibraryEnv(), False, False, False )

def pruneLibs(libs):
    import sets # needed for Python 2.3 compatibility
    return list(sets.Set(libs))

env.Replace(LIBS = pruneLibs(env["LIBS"]))

cat = Builder(action = "cat $SOURCES > $TARGET")
env.Append(BUILDERS = {"Cat" : cat})
    
context.setExampleEnv(env.Clone())

SConscript("all.scons", exports = ["context"])
