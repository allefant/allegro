import os
import SCons
import helpers

Import('context')
Import('env')

opts = helpers.Options(context, "options-osx.py", ARGUMENTS)

opts.AddWithoutMemorize('config', "Force re-configuration of the build.", 0)

opts.Update(env)
opts.Save(env)
Help(opts.GenerateHelpText(env))

def getArgumentOption(name, default):
    arg = ARGUMENTS.get(name,default)
    if arg == "yes" or arg == "1":
        return 1
    return 0


def setupPlatform(platform, config):
    platform["ALLEGRO_MACOSX"] = True
    platform["ALLEGRO_CFG_OPENGL"] = True
    platform["ALLEGRO_BIG_ENDIAN"] = config.CheckBigEndian()
    platform["ALLEGRO_LITTLE_ENDIAN"] = config.CheckLittleEndian()
    platform["ALLEGRO_HAVE_DIRENT_H"] = True
    platform["ALLEGRO_HAVE_STDBOOL_H"] = True
    platform["ALLEGRO_HAVE_STDINT_H"] = True
    platform["ALLEGRO_HAVE_SYS_STAT_H"] = True
    platform["ALLEGRO_HAVE_SYS_TYPES_H"] = True
    platform["ALLEGRO_DARWIN"] = True

    return config.Finish()

platform, configure_env = helpers.do_configure('osx', context,
                            context.getTests(), setupPlatform,
                            'include/allegro5/platform/alplatf.h.cmake',
                            'include/allegro5/platform/alplatf.h',
                            getArgumentOption('config', 0))


# helpers.parse_cmake_h(env,helpers.define('ALLEGRO_MACOSX','ALLEGRO_CFG_OPENGL'),'#include/allegro5/platform/alplatf.h.cmake','include/allegro5/platform/alplatf.h')

# alplatf_h = helpers.generate_alplatf_h(env, ['ALLEGRO_MACOSX','ALLEGRO_CFG_OPENGL'])
# file = open( "include/allegro5/platform/alplatf.h", "w" )
# file.write( "#define ALLEGRO_MACOSX" )
# file.close()

## These lines tell SCons to treat .m files like .cpp files
static_obj, shared_obj = SCons.Tool.createObjBuilders( env )
shared_obj.add_action( '.m', SCons.Defaults.ShCAction )
shared_obj.add_emitter( '.m', SCons.Defaults.SharedObjectEmitter )

env[ 'SHCCFLAGS' ] = SCons.Util.CLVar( '$CCFLAGS' )

osxfiles = context.cmake["ALLEGRO_SRC_MACOSX_FILES"]
context.addFiles(osxfiles);

context.addFiles(context.cmake["ALLEGRO_SRC_C_FILES"])
context.addFiles(context.cmake["ALLEGRO_SRC_OPENGL_FILES"])

env.BuildDir('include', '#include', duplicate = 0)

#mainEnv = Environment()
#mainLibrary = mainEnv.StaticLibrary( 'alleg-main', 'src/macosx/main.m' )
#mainEnv.Install(context.getLibraryDir(),mainLibrary)

# context.addLibrary(context.getLibraryDir() + "/alleg-main")

# context.addLibrary(context.getLibraryDir() + "/liballeg-main.a")

def buildMain(env,appendDir,buildDir,libDir):
    fenv = env.Copy()
    fenv.Replace(LIBS = [])
    fenv.BuildDir(buildDir + 'macosx', 'src/macosx', duplicate = 0)
    fenv.Append(CPPDEFINES = 'ALLEGRO_SRC')
    # lib = fenv.StaticLibrary('alleg-main',appendDir(buildDir + '/macosx/', ['main.m']))
    libTool = Builder(action = 'libtool -static -s -o $TARGETS $SOURCES',
                      prefix = 'lib',
		      suffix = '.a',
		      src_builder = 'StaticObject',
		      src_suffix = '.o');
    fenv.Append(BUILDERS = {'LibTool' : libTool})
    lib = fenv.LibTool(libDir + '/alleg-main',appendDir(buildDir + '/macosx/', ['main.m']))
    return lib

#env = context.getLibraryEnv()
#mainLib = env.StaticLibrary( 'alleg-main', 'build/release/macosx/main.m' )

# context.addExtra(buildMain)

def makeExampleEnv():
    exampleEnv = Environment()

    flags = [ "-Wall", "-Wno-long-double", "-O2", "-funroll-loops", "-ffast-math", "-fomit-frame-pointer", "-fno-common", "-pipe", "-dynamic" ]
    defines = [ "ALLEGRO_NO_ASM", "ALLEGRO_LIB_BUILD" ]
    includes = [ "include", "include/allegro" ]
    # linkflags = ["-prebind", "-framework", "Cocoa"]
    linkflags = []
    # libpath = [ "lib/macosx" ]
    # libs = [ 'alleg-main' ]
    libs = [ 'lib/macosx/liballeg-main.a' ]

    def addFramework( name ):
        linkflags.append("-framework")
        linkflags.append(name)


    addFramework("Cocoa")
    addFramework("Opengl")
    addFramework("CoreAudio")
    addFramework("AudioUnit")
    addFramework("AudioToolbox")

    # gcc -s -prebind -o examples/exupdate obj/macosx/alleg/exupdate.o lib/macosx/liballeg-4.9.0.dylib lib/macosx/liballeg-main.a -framework Cocoa
    
    exampleEnv.Append(CCFLAGS = flags)
    exampleEnv.Append(CPPDEFINES = defines)
    exampleEnv.Append(CPPPATH = includes)
    # exampleEnv.Append(LIBPATH = libpath)
    exampleEnv.Append(LINKFLAGS = linkflags)
    # exampleEnv.Append(LIBS = libs)
    return exampleEnv

# context.addLibrary(File('#%s/liballeg-main.a' % context.getLibraryDir()))

# context.setExampleEnv( makeExampleEnv() )

# gcc -DALLEGRO_LIB_BUILD -Wall -Wno-long-double  -O2 -funroll-loops -ffast-math -fomit-frame-pointer -fno-common -pipe -dynamic -DALLEGRO_NO_ASM -I. -I./include -o obj/macosx/alleg/exupdate.o -c examples/exupdate.c

flags = Split("""
-O2
-Wall
-Wno-long-double
-dynamic
-ffast-math
-fno-common
-fomit-frame-pointer
-funroll-loops
-g
-pipe
""");

includes = ["include", "include/allegro", "."]

defines = Split("""
ALLEGRO_NO_ASM
ALLEGRO_LIB_BUILD
ALLEGRO_SHARED
ALLEGRO_SRC
""");

linkflags = [ "-prebind", "-seg1addr", "0x30000000", "-compatibility_version", str(context.getVersion()), "-current_version", str(context.getVersion()), "-install_name", "liballeg-" + str(context.getVersion()) + ".dylib", "-flat_namespace", "-undefined", "suppress" ]

def addFramework( name ):
    linkflags.append( "-framework" )
    linkflags.append( name )

addFramework( "Cocoa" )
addFramework( "Carbon" )
addFramework( "IOKit" )
addFramework( "System" )
addFramework( "CoreAudio" )
addFramework( "AudioUnit" )
addFramework( "AudioToolbox" )
addFramework( "QuickTime" )	
addFramework( "OpenGL" )	

env.Append(CCFLAGS = flags)
env.Append(CPPDEFINES = defines)
env.Append(CPPPATH = includes)
env.Append(LINKFLAGS = linkflags)

cat = Builder(action = "cat $SOURCES > $TARGET")
env.Append(BUILDERS = {"Cat" : cat})

installed = SConscript('all.scons', exports = ['context','env'])
Return('installed')
